image: docker:latest

services:
  - docker:dind

cache:
  paths:
    - .m2/repository

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  DOCKER_REGISTRY: "gitlab:5000"

  DOCKER_IMAGE: "demo-service"


stages:
  - test
  - build
  - deploy

test:
  stage: test
  image: maven:3-jdk-8
  script: "mvn $MAVEN_CLI_OPTS test-compile"

build:
  stage: build
  image: maven:3-jdk-8
  services:
  - docker:dind
  script: "mvn $MAVEN_CLI_OPTS package docker:build docker:push -DskipTests"
  artifacts:
    paths:
      - target/*.jar

deploy:
  stage: deploy
  image: maven:3-jdk-8
  script:
    - echo '<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                               https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
               <server>
                  <id>nexus</id>
                  <username>$MAVEN_DEPLOY_USER</username>
                  <password>$MAVEN_DEPLOY_PASSWORD</password>
                </server>
               </servers>
             </settings>' > $HOME/.m2/settings.xml
    - "cat $HOME/.m2/settings.xml"
    - "mvn $MAVEN_CLI_OPTS deploy scm:tag -Drevision=$CI_JOB_ID -DskipTests"

deploy_test:
  stage: deploy
  image: maven:3-jdk-8
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")

    # In order to properly check the server's host key, assuming you created the
    # SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines
    # instead.
    - 'mkdir -p ~/.ssh && chmod 700 ~/.ssh'
    - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
  script:
    - echo "Deploy to TEST environment"
    - ssh vagrant@test "docker stop demo-service || true && docker rm  demo-service || true"
    - ssh vagrant@test "docker pull gitlab:5000/demo-service:$CI_COMMIT_SHA"
    - ssh vagrant@test docker run -d --rm --name demo-service -e SPRING_PROFILES_ACTIVE=test -p 8080:8080 gitlab:5000/demo-service:$CI_COMMIT_SHA
  environment:
    name: test
    url: http://test:8080/
  only:
  - master

deploy_prod:
  stage: deploy
  image: maven:3-jdk-8
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")

    # In order to properly check the server's host key, assuming you created the
    # SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines
    # instead.
    - 'mkdir -p ~/.ssh && chmod 700 ~/.ssh'
    - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
  script:
    - echo "Deploy to PROD environment"
    - ssh vagrant@prod "docker stop demo-service || true && docker rm  demo-service || true"
    - ssh vagrant@prod "docker pull gitlab:5000/demo-service:$CI_COMMIT_SHA"
    - ssh vagrant@prod docker run -d --rm --name demo-service -e SPRING_PROFILES_ACTIVE=prod -p 8080:8080 gitlab:5000/demo-service:$CI_COMMIT_SHA
  environment:
    name: test
    url: http://prod:8080/
  when: manual
  only:
  - master
